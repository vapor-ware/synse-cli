# Defaults for our CircleCI jobs.
defaults: &defaults
  working_directory: /go/src/github.com/vapor-ware/synse-cli
  docker:
    - image: golang:latest
  environment:
    BIN_NAME: "synse"


# Common config for tag-triggered workflows
tag-filters: &tag-filters
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^[0-9]*(\.[0-9]*)*(-(\S)*)?$/


# CircleCI Config
version: 2
jobs:

  # build
  #
  # This job is run for all commits. It makes sure that: the source code
  # is properly linted, the source code is properly formatted, the source
  # can be compiled and built successfully, and that tests pass.
  #
  # This job does not publish any build artifacts.
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
            - v1-vendor-{{ checksum "Gopkg.toml" }}
      - run:
          name: Installing Vendored Dependencies
          command: make dep
      - run:
          name: Lint
          command: make lint
      - run:
          name: Format
          command: |
            fmt="$(find . -name '*.go' -not -wholename './vendor/*' | while read -r file; do goimports -d "$file"; done)"
            if [ "$fmt" != "" ]; then
              echo "$fmt"
              exit 1
            fi
      - run:
          name: Test
          command: |
            # run tests with coverage
            ./bin/coverage.sh

            # upload coverage results
            bash <(curl -s https://codecov.io/bash)
      - run:
          name: Build
          command: make build
      - save_cache:
          when: on_success
          key: v1-vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor/

  # build-for-release
  #
  # Build the artifacts used for release. This is done as its own
  # stage since there are multiple modes of release.
  build-for-release:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
            - v1-vendor-{{ checksum "Gopkg.toml" }}
      - run:
          name: Installing Vendored Dependencies
          command: make dep
      - run:
          name: Build Artifacts
          command: make build-ci BIN_VERSION="${CIRCLE_TAG}"
      - save_cache:
          when: on_success
          key: v1-vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor/
      - persist_to_workspace:
          root: .
          paths:
            - build
      - store_artifacts:
          path: build
          destination: binaries

  # release
  #
  # This job creates a GitHub release draft for the tag that was pushed.
  # It generates a changelog for the release and attaches build artifacts
  # to the release as well. The release should be manually published on GitHub.
  release:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Generate Changelog
          command: |
            tag=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1` || true)
            since_tag=$(if [ "${tag}" ]; then echo "--since-tag ${tag}"; fi)

            docker pull timfallmk/github-changelog-generator
            docker run --name changelog timfallmk/github-changelog-generator \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -p ${CIRCLE_PROJECT_REPONAME} \
              -t ${GITHUB_TOKEN} \
              ${since_tag}
            docker cp changelog:/usr/local/src/your-app/CHANGELOG.md ./
      - run:
          name: Create Release
          command: |
            go get -v github.com/tcnksm/ghr
            if git describe --exact-match --tags HEAD; then
              CIRCLE_TAG=$(git describe --exact-match --tags HEAD)
            fi
            ghr \
              -u ${GITHUB_USER} \
              -t ${GITHUB_TOKEN} \
              -b "$(cat ./CHANGELOG.md)" \
              -p 1 \
              -replace \
              -draft \
              ${CIRCLE_TAG} build/

  # slack-upload
  #
  # Upload the built binaries to Slack
  slack-upload:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Upload Binaries to Slack
          command: |
            export GIT_TAG=$(git describe --exact-match --tags HEAD)
            for DISTRO in linux darwin
            do
              curl -F file=@build/${BIN_NAME}_${DISTRO}_amd64 -F \
              channels=${SLACK_CHANNEL} -F \
              token=${SLACK_TOKEN} -F \
              filename=${BIN_NAME} -F \
              filetype=binary -F \
              title="${BIN_NAME} ${GIT_TAG} for ${DISTRO}" \
              https://slack.com/api/files.upload
            done


workflows:
  version: 2
  release:
    jobs:
      - build

      - build-for-release:
          <<: *tag-filters

      - release:
          context: vapor-auto
          <<: *tag-filters
          requires:
            - build-for-release

      - slack-upload:
          context: org-global
          <<: *tag-filters
          requires:
            - build-for-release
