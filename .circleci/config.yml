version: 2
jobs:
  build:
    docker:
      - image: golang:latest
        environment:
          DEBUG: true

    working_directory: /go/src/github.com/vapor-ware/synse-cli

    environment:
        TEST_DIRECTORY: "gotest"
        BINARY_NAME: "synse"

    steps:
      - setup_remote_docker:
          docker_layer_caching: true

      - checkout

      - restore_cache:
          keys:
            - vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
            - vendor-{{ checksum "Gopkg.toml" }}

      - run:
          name: "Make test report directory"
          command: mkdir -p /tmp/$TEST_DIRECTORY

      - run:
          name: "Installing Vendored Dependencies"
          command: |
            go get -v github.com/golang/dep/cmd/dep
            CGO_ENABLED=0 go install github.com/golang/dep/cmd/dep
            dep ensure -v --vendor-only

      - run:
          name: "Getting builder"
          command: |
            go get -v github.com/mitchellh/gox

      - run:
          name: "Linting"
          command: |
            go get -u github.com/alecthomas/gometalinter
            gometalinter --install
            gometalinter ./... \
              --vendor \
              --skip "testdata" \
              --disable=megacheck \
              --tests \
              --sort=severity \
              --aggregate \
              --deadline=500s
            gometalinter ./... \
              --vendor \
              --skip "testdata" \
              --disable-all \
              --tests \
              --sort=severity \
              --aggregate \
              --enable=megacheck \
              --deadline=240s

      - run:
          name: "Get test to junit xml parser"
          command: |
            go get -v -u github.com/jstemmer/go-junit-report

      - run:
          name: "Running Tests"
          command: |
            #make ci-test
            # run tests with coverage
            ./bin/coverage.sh

            # upload coverage results
            bash <(curl -s https://codecov.io/bash)

      - run:
          name: "Building"
          command: |
            cd cmd/
            gox --output="../build/${BINARY_NAME}_{{.OS}}_{{.Arch}}" -osarch='!darwin/386'

      - save_cache:
          when: on_success
          key: vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor/

      - persist_to_workspace:
          root: .
          paths:
            - build

      - store_artifacts:
          path: build
          destination: binaries

      - store_test_results:
          path: /tmp/gotest

  release:
    working_directory: /go/src/github.com/vapor-ware/synse-cli
    docker:
      - image: circleci/golang:latest

    environment:
        BINARY_NAME: "synse"

    steps:
      - checkout

      - setup_remote_docker

      - attach_workspace:
          at: .

      - run:
          name: "Getting Distributor"
          command: |
            go get -v github.com/tcnksm/ghr

      - run:
          name: "Generate Changelog"
          command: |
            docker pull timfallmk/github-changelog-generator
            docker run --name changelog timfallmk/github-changelog-generator \
              -u vapor-ware \
              -p ${BINARY_NAME}-cli \
              --since-tag $(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`) \
              -t ${GITHUB_TOKEN}
            docker cp changelog:/usr/local/src/your-app/CHANGELOG.md ./
      # - run:
      #     name: "Tag for release"
      #     command: |
      #       docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
      #       make docker-tag-release

      - run:
          name: "Creating Release"
          command: make ci-create-release

workflows:
  version: 2

  release:
    jobs:
      - build:
          context: org-global
          filters:
            tags:
              only: /.*/

      - release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]*(\.[0-9]*)*$/
